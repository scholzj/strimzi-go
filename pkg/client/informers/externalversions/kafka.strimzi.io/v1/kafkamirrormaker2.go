/*
Copyright 2025 Jakub Scholz.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by informer-gen. DO NOT EDIT.

package v1

import (
	context "context"
	time "time"

	apiskafkastrimziiov1 "github.com/scholzj/strimzi-go/pkg/apis/kafka.strimzi.io/v1"
	versioned "github.com/scholzj/strimzi-go/pkg/client/clientset/versioned"
	internalinterfaces "github.com/scholzj/strimzi-go/pkg/client/informers/externalversions/internalinterfaces"
	kafkastrimziiov1 "github.com/scholzj/strimzi-go/pkg/client/listers/kafka.strimzi.io/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// KafkaMirrorMaker2Informer provides access to a shared informer and lister for
// KafkaMirrorMaker2s.
type KafkaMirrorMaker2Informer interface {
	Informer() cache.SharedIndexInformer
	Lister() kafkastrimziiov1.KafkaMirrorMaker2Lister
}

type kafkaMirrorMaker2Informer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewKafkaMirrorMaker2Informer constructs a new informer for KafkaMirrorMaker2 type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewKafkaMirrorMaker2Informer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredKafkaMirrorMaker2Informer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredKafkaMirrorMaker2Informer constructs a new informer for KafkaMirrorMaker2 type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredKafkaMirrorMaker2Informer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KafkaV1().KafkaMirrorMaker2s(namespace).List(context.Background(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KafkaV1().KafkaMirrorMaker2s(namespace).Watch(context.Background(), options)
			},
			ListWithContextFunc: func(ctx context.Context, options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KafkaV1().KafkaMirrorMaker2s(namespace).List(ctx, options)
			},
			WatchFuncWithContext: func(ctx context.Context, options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KafkaV1().KafkaMirrorMaker2s(namespace).Watch(ctx, options)
			},
		},
		&apiskafkastrimziiov1.KafkaMirrorMaker2{},
		resyncPeriod,
		indexers,
	)
}

func (f *kafkaMirrorMaker2Informer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredKafkaMirrorMaker2Informer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *kafkaMirrorMaker2Informer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&apiskafkastrimziiov1.KafkaMirrorMaker2{}, f.defaultInformer)
}

func (f *kafkaMirrorMaker2Informer) Lister() kafkastrimziiov1.KafkaMirrorMaker2Lister {
	return kafkastrimziiov1.NewKafkaMirrorMaker2Lister(f.Informer().GetIndexer())
}
