/*
Copyright 2025 Jakub Scholz.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	context "context"

	kafkastrimziiov1 "github.com/scholzj/strimzi-go/pkg/apis/kafka.strimzi.io/v1"
	scheme "github.com/scholzj/strimzi-go/pkg/client/clientset/versioned/scheme"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// KafkaNodePoolsGetter has a method to return a KafkaNodePoolInterface.
// A group's client should implement this interface.
type KafkaNodePoolsGetter interface {
	KafkaNodePools(namespace string) KafkaNodePoolInterface
}

// KafkaNodePoolInterface has methods to work with KafkaNodePool resources.
type KafkaNodePoolInterface interface {
	Create(ctx context.Context, kafkaNodePool *kafkastrimziiov1.KafkaNodePool, opts metav1.CreateOptions) (*kafkastrimziiov1.KafkaNodePool, error)
	Update(ctx context.Context, kafkaNodePool *kafkastrimziiov1.KafkaNodePool, opts metav1.UpdateOptions) (*kafkastrimziiov1.KafkaNodePool, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, kafkaNodePool *kafkastrimziiov1.KafkaNodePool, opts metav1.UpdateOptions) (*kafkastrimziiov1.KafkaNodePool, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*kafkastrimziiov1.KafkaNodePool, error)
	List(ctx context.Context, opts metav1.ListOptions) (*kafkastrimziiov1.KafkaNodePoolList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *kafkastrimziiov1.KafkaNodePool, err error)
	KafkaNodePoolExpansion
}

// kafkaNodePools implements KafkaNodePoolInterface
type kafkaNodePools struct {
	*gentype.ClientWithList[*kafkastrimziiov1.KafkaNodePool, *kafkastrimziiov1.KafkaNodePoolList]
}

// newKafkaNodePools returns a KafkaNodePools
func newKafkaNodePools(c *KafkaV1Client, namespace string) *kafkaNodePools {
	return &kafkaNodePools{
		gentype.NewClientWithList[*kafkastrimziiov1.KafkaNodePool, *kafkastrimziiov1.KafkaNodePoolList](
			"kafkanodepools",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *kafkastrimziiov1.KafkaNodePool { return &kafkastrimziiov1.KafkaNodePool{} },
			func() *kafkastrimziiov1.KafkaNodePoolList { return &kafkastrimziiov1.KafkaNodePoolList{} },
		),
	}
}
